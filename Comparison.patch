diff --git a/source/Comparison.cc b/source/Comparison.cc
index de26841..1da32ab 100644
--- a/source/Comparison.cc
+++ b/source/Comparison.cc
@@ -261,7 +261,6 @@ void CNF :: GrowFromParseTree (struct AndList *parseTree, Schema *leftSchema,
 			
 			// these store the types of the two values that are found
 			Type typeLeft;
-			Type typeRight;
 
 
 			// first thing is to deal with the left operand
@@ -330,14 +329,12 @@ void CNF :: GrowFromParseTree (struct AndList *parseTree, Schema *leftSchema,
 					cnf.orList[whichAnd][whichOr].operand2 = Left;
 					cnf.orList[whichAnd][whichOr].whichAtt2 =
 						leftSchema->Find (myOr->left->right->value);	
-					typeRight = leftSchema->FindType (myOr->left->right->value);
 
 				// see if we can find it in the right schema
 				} else if (rightSchema->Find (myOr->left->right->value) != -1) {
                                         cnf.orList[whichAnd][whichOr].operand2 = Right;
                                         cnf.orList[whichAnd][whichOr].whichAtt2 =
                                                 rightSchema->Find (myOr->left->right->value);
-					typeRight = rightSchema->FindType (myOr->left->right->value);
 
 				// it is not there!  So there is an error in the query
                                 } else {
@@ -347,28 +344,13 @@ void CNF :: GrowFromParseTree (struct AndList *parseTree, Schema *leftSchema,
 
 			// the next thing is to see if we have a string; if so, add it to the 
 			// literal record that stores all of the comparison values
-			} else if (myOr->left->right->code == STRING) {
+			} else if ((myOr->left->right->code == STRING) ||
+                                   (myOr->left->right->code == INT) ||
+                                   (myOr->left->right->code == DOUBLE)){
 
-				cnf.orList[whichAnd][whichOr].operand2 = Literal;
-				cnf.orList[whichAnd][whichOr].whichAtt2 = numFieldsInLiteral;
-				AddLitToFile (numFieldsInLiteral, outRecFile, outSchemaFile, myOr->left->right->value, String);
-				typeRight = String;
-
-			// see if it is an integer
-			} else if (myOr->left->right->code == INT) {
-
-				cnf.orList[whichAnd][whichOr].operand2 = Literal;
-				cnf.orList[whichAnd][whichOr].whichAtt2 = numFieldsInLiteral;
-				AddLitToFile (numFieldsInLiteral, outRecFile, outSchemaFile, myOr->left->right->value, Int);
-				typeRight = Int;
-
-			// see if it is a double
-			} else if (myOr->left->right->code == DOUBLE) {
-
-				cnf.orList[whichAnd][whichOr].operand2 = Literal;
-				cnf.orList[whichAnd][whichOr].whichAtt2 = numFieldsInLiteral;
-				AddLitToFile (numFieldsInLiteral, outRecFile, outSchemaFile, myOr->left->right->value, Double);
-				typeRight = Double;
+                                cnf.orList[whichAnd][whichOr].operand2 = Literal;
+                                cnf.orList[whichAnd][whichOr].whichAtt2 = numFieldsInLiteral;
+                                AddLitToFile (numFieldsInLiteral, outRecFile, outSchemaFile, myOr->left->right->value, typeLeft);
 	
 			// catch-all case
 			} else {
@@ -379,11 +361,13 @@ void CNF :: GrowFromParseTree (struct AndList *parseTree, Schema *leftSchema,
 			
 
 			// now we check to make sure that there was not a type mismatch
+/*
 			if (typeLeft != typeRight) {
 				cerr << "ERROR! Type mismatch in CNF.  " << myOr->left->left->value << " and "
 					<< myOr->left->right->value << " were found to not match.\n";
 				exit (1);
 			}
+*/
 
 			// set up the type info for this comparison
 			cnf.orList[whichAnd][whichOr].attType = typeLeft;
@@ -467,7 +451,6 @@ void CNF :: GrowFromParseTree (struct AndList *parseTree, Schema *mySchema,
 			
 			// these store the types of the two values that are found
 			Type typeLeft;
-			Type typeRight;
 
 			// first thing is to deal with the left operand
 			// so we check to see if it is an attribute name, and if so,
@@ -528,7 +511,6 @@ void CNF :: GrowFromParseTree (struct AndList *parseTree, Schema *mySchema,
 					cnf.orList[whichAnd][whichOr].operand2 = Left;
 					cnf.orList[whichAnd][whichOr].whichAtt2 =
 						mySchema->Find (myOr->left->right->value);	
-					typeRight = mySchema->FindType (myOr->left->right->value);
 
 				// it is not there!  So there is an error in the query
                                 } else {
@@ -538,28 +520,13 @@ void CNF :: GrowFromParseTree (struct AndList *parseTree, Schema *mySchema,
 
 			// the next thing is to see if we have a string; if so, add it to the 
 			// literal record that stores all of the comparison values
-			} else if (myOr->left->right->code == STRING) {
-
-				cnf.orList[whichAnd][whichOr].operand2 = Literal;
-				cnf.orList[whichAnd][whichOr].whichAtt2 = numFieldsInLiteral;
-				AddLitToFile (numFieldsInLiteral, outRecFile, outSchemaFile, myOr->left->right->value, String);
-				typeRight = String;
-
-			// see if it is an integer
-			} else if (myOr->left->right->code == INT) {
-
-				cnf.orList[whichAnd][whichOr].operand2 = Literal;
-				cnf.orList[whichAnd][whichOr].whichAtt2 = numFieldsInLiteral;
-				AddLitToFile (numFieldsInLiteral, outRecFile, outSchemaFile, myOr->left->right->value, Int);
-				typeRight = Int;
-
-			// see if it is a double
-			} else if (myOr->left->right->code == DOUBLE) {
+			} else if ((myOr->left->right->code == STRING) ||
+				   (myOr->left->right->code == INT) ||
+				   (myOr->left->right->code == DOUBLE)){
 
 				cnf.orList[whichAnd][whichOr].operand2 = Literal;
 				cnf.orList[whichAnd][whichOr].whichAtt2 = numFieldsInLiteral;
-				AddLitToFile (numFieldsInLiteral, outRecFile, outSchemaFile, myOr->left->right->value, Double);
-				typeRight = Double;
+				AddLitToFile (numFieldsInLiteral, outRecFile, outSchemaFile, myOr->left->right->value, typeLeft);
 	
 			// catch-all case
 			} else {
@@ -569,11 +536,13 @@ void CNF :: GrowFromParseTree (struct AndList *parseTree, Schema *mySchema,
 			
 
 			// now we check to make sure that there was not a type mismatch
+/*
 			if (typeLeft != typeRight) {
 				cerr << "ERROR! Type mismatch in CNF.  " << myOr->left->left->value << " and "
 					<< myOr->left->right->value << " were found to not match.\n";
 				exit (1);
 			}
+*/
 
 			// set up the type info for this comparison
 			cnf.orList[whichAnd][whichOr].attType = typeLeft;
